<?php

namespace Puli;

use Puli\Discovery\Api\Discovery;
use Puli\Discovery\Binding\Initializer\ResourceBindingInitializer;
use Puli\Discovery\JsonDiscovery;
use Puli\Manager\Api\Server\ServerCollection;
use Puli\Repository\Api\ResourceRepository;
use Puli\Repository\JsonRepository;
use Puli\UrlGenerator\Api\UrlGenerator;
use Puli\UrlGenerator\DiscoveryUrlGenerator;
use RuntimeException;

/**
 * Creates Puli's core services.
 *
 * This class was auto-generated by Puli.
 *
 * IMPORTANT: Before modifying the code below, set the "factory.auto-generate"
 * configuration key to false:
 *
 *     $ puli config factory.auto-generate false
 *
 * Otherwise any modifications will be overwritten!
 */
class GeneratedPuliFactory
{
    /**
     * Creates the resource repository.
     *
     * @return ResourceRepository The created resource repository.
     */
    public function createRepository()
    {
        if (!interface_exists('Puli\Repository\Api\ResourceRepository')) {
            throw new RuntimeException('Please install puli/repository to create ResourceRepository instances.');
        }

        $repo = new JsonRepository(__DIR__.'/path-mappings.json', __DIR__.'/..', true);

        return $repo;
    }

    /**
     * Creates the resource discovery.
     *
     * @param ResourceRepository $repo The resource repository to read from.
     *
     * @return Discovery The created discovery.
     */
    public function createDiscovery(ResourceRepository $repo)
    {
        if (!interface_exists('Puli\Discovery\Api\Discovery')) {
            throw new RuntimeException('Please install puli/discovery to create Discovery instances.');
        }

        $discovery = new JsonDiscovery(__DIR__.'/bindings.json', array(
            new ResourceBindingInitializer($repo),
        ));

        return $discovery;
    }

    /**
     * Creates the URL generator.
     *
     * @param Discovery $discovery The discovery to read from.
     *
     * @return UrlGenerator The created URL generator.
     */
    public function createUrlGenerator(Discovery $discovery)
    {
        if (!interface_exists('Puli\UrlGenerator\Api\UrlGenerator')) {
            throw new RuntimeException('Please install puli/url-generator to create UrlGenerator instances.');
        }

        $generator = new DiscoveryUrlGenerator($discovery, array());

        return $generator;
    }

    /**
     * Returns the order in which the installed packages should be loaded
     * according to the override statements.
     *
     * @return string[] The sorted package names.
     */
    public function getPackageOrder()
    {
        $order = array(
            'mauri870/laravel-linkedin',
            'clue/stream-filter',
            'doctrine/inflector',
            'doctrine/instantiator',
            'guzzlehttp/guzzle',
            'guzzlehttp/promises',
            'guzzlehttp/psr7',
            'happyr/linkedin-api-client',
            'illuminate/container',
            'illuminate/contracts',
            'illuminate/database',
            'illuminate/http',
            'illuminate/session',
            'illuminate/support',
            'justinrainbow/json-schema',
            'myclabs/deep-copy',
            'nesbot/carbon',
            'padraic/humbug_get_contents',
            'padraic/phar-updater',
            'php-http/client-common',
            'php-http/discovery',
            'php-http/guzzle6-adapter',
            'php-http/httplug',
            'php-http/message',
            'php-http/message-factory',
            'php-http/promise',
            'phpdocumentor/reflection-docblock',
            'phpspec/prophecy',
            'phpunit/php-code-coverage',
            'phpunit/php-file-iterator',
            'phpunit/php-text-template',
            'phpunit/php-timer',
            'phpunit/php-token-stream',
            'phpunit/phpunit',
            'phpunit/phpunit-mock-objects',
            'psr/http-message',
            'psr/log',
            'puli/cli',
            'puli/composer-plugin',
            'puli/discovery',
            'puli/manager',
            'puli/repository',
            'puli/url-generator',
            'ramsey/uuid',
            'sebastian/comparator',
            'sebastian/diff',
            'sebastian/environment',
            'sebastian/exporter',
            'sebastian/global-state',
            'sebastian/recursion-context',
            'sebastian/resource-operations',
            'sebastian/version',
            'seld/jsonlint',
            'symfony/console',
            'symfony/debug',
            'symfony/event-dispatcher',
            'symfony/filesystem',
            'symfony/finder',
            'symfony/http-foundation',
            'symfony/http-kernel',
            'symfony/polyfill-mbstring',
            'symfony/process',
            'symfony/translation',
            'symfony/yaml',
            'webmozart/assert',
            'webmozart/console',
            'webmozart/expression',
            'webmozart/glob',
            'webmozart/json',
            'webmozart/key-value-store',
            'webmozart/path-util',
        );

        return $order;
    }
}
